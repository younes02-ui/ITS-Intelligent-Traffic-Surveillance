import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

# ------------------------------------------------------------
# √âtape 1 : Chargement du dataset annot√©
# ------------------------------------------------------------
df = pd.read_csv("fcd_data_cleaned.csv")

# ------------------------------------------------------------
# √âtape 2 : S√©lection des variables pertinentes
# ------------------------------------------------------------
features = ['speed', 'acceleration', 'jerk', 'stopped_time', 'leader_distance', 'gap_time']
X = df[features]          # Variables d'entr√©e
y_true = df['anomaly']    # √âtiquettes (0 = normal, 1 = anomalie) ‚Äî utilis√©es uniquement pour l‚Äô√©valuation

# ------------------------------------------------------------
# √âtape 3 : Normalisation des donn√©es
# ------------------------------------------------------------
# On standardise les valeurs pour √©viter qu'une variable domine le clustering
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ------------------------------------------------------------
# √âtape 4 : Application de K-Means avec 2 clusters
# ------------------------------------------------------------
# On demande 2 clusters : un pour les comportements normaux, un pour les anormaux
kmeans = KMeans(n_clusters=2, random_state=42)
y_pred = kmeans.fit_predict(X_scaled)

# ------------------------------------------------------------
# √âtape 5 : R√©alignement des clusters
# ------------------------------------------------------------
# On suppose que le cluster minoritaire est celui des anomalies.
# Si ce n‚Äôest pas le cas, on inverse les 0 et 1.
if sum(y_pred) > len(y_pred) / 2:
    y_pred = [0 if x == 1 else 1 for x in y_pred]

# ------------------------------------------------------------
# √âtape 6 : √âvaluation (√† but d‚Äôanalyse uniquement, ce mod√®le reste non supervis√©)
# ------------------------------------------------------------
print("üîç R√©sultats - K-Means (non supervis√©)")
print("Matrice de confusion :")
print(confusion_matrix(y_true, y_pred))

print("\nRapport de classification :")
print(classification_report(y_true, y_pred, digits=4))
